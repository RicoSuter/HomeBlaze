@using HomeBlaze.Abstractions.Services;
@using Microsoft.Extensions.Logging;
@using MudBlazor
@using System.Threading;

<div style="width: @(Width)px; height: @(Height)px">
    <div style="position: relative; left: @(PaddingLeft)px; top: @(PaddingTop)px;
                transform-origin: center; @(_mouseDown ? "transform: scale(0.9);" : "")
                width: @(Width - PaddingLeft - PaddingRight)px;
                height: @(Height - PaddingTop - PaddingBottom)px;
                text-align: center;
                color: @(TextColor);
                background-color: @(BackgroundColor);"
         @onmousedown="@(() => _mouseDown = true)"
         @onmouseout="@(() => _mouseDown = false)"
         @onmouseup="@(() => OnClick())"
         @ontouchstart="@(() => _mouseDown = true)"
         @ontouchleave="@(() => _mouseDown = false)"
         @ontouchcancel="@(() => _mouseDown = false)"
         @ontouchmove="@(() => _mouseDown = false)"
         @ontouchend="@(() => OnClick())">

        <div style="transform: translateY(-50%) translateX(-50%); position: absolute;
                top: 50%; left: 50%; width: @(Width - PaddingLeft - PaddingRight)px;">
            @ChildContent
        </div>
    </div>
</div>

@code {
    private bool _mouseDown = false;
    private bool _executing = false;

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public int Height { get; set; }

    [Parameter]
    public int PaddingLeft { get; set; } = 10;

    [Parameter]
    public int PaddingTop { get; set; } = 10;

    [Parameter]
    public int PaddingBottom { get; set; } = 10;

    [Parameter]
    public int PaddingRight { get; set; } = 10;

    [Parameter]
    public EventCallback<object> Clicked { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]

    public string TextColor { get; set; } = "white";

    [Parameter]

    public string BackgroundColor { get; set; } = "#000000";

    public async void OnClick()
    {
        if (_mouseDown && !_executing)
        {
            _executing = true;
            try
            {
                await Clicked.InvokeAsync(null);
            }
            finally
            {
                _executing = false;
                _mouseDown = false;
                StateHasChanged();
            }
        }
    }
}