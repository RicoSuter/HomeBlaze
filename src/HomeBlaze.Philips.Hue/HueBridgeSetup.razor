@using HomeBlaze.Abstractions;
@using HomeBlaze.Components;
@using HueApi
@using HueApi.BridgeLocator
@using Microsoft.Extensions.Logging;
@using MudBlazor
@using System.Threading
@using HomeBlaze.Abstractions.Services

@inject IThingManager ThingManager
@inject IEventManager EventManager
@inject IDialogService DialogService
@inject ILogger<HueBridge> Logger

@inherits ThingSetupComponentBase<HueBridge>

<br />
@if (_bridges == null)
{
    <MudItem>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        Searching for Philips Hue Bridges...
    </MudItem>
}
else if (_bridges.Any())
{
    <MudItem>
        Press the Link button on your Bridge and then select the Bridge:
        <br />
        <br />
    </MudItem>

    <MudItem>
        <MudList Clickable="true" @bind-SelectedValue="_selectedBridge">
            <MudDivider />
            @foreach (var bridge in _bridges)
            {
                <MudListItem Value="bridge">
                    @bridge.BridgeId (@bridge.IpAddress)
                </MudListItem>

                <MudDivider />
            }
        </MudList>
    </MudItem>
}
else
{
    <MudItem>
        No Philips Hue Bridges found.
    </MudItem>
}

@code {
    private List<LocatedBridge>? _bridges;
    private object? _selectedBridge;

    public override bool IsValid => _selectedBridge != null;

    protected override async void OnInitialized()
    {
        _bridges = await HueBridgeDiscovery.FastDiscoveryWithNetworkScanFallbackAsync(
            TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(30));

        await InvokeAsync(StateHasChanged);
    }

    public override async Task<HueBridge?> CreateThingAsync(CancellationToken cancellationToken)
    {
        try
        {
            if (_selectedBridge is LocatedBridge selectedBridge)
            {
                var result = await LocalHueApi.RegisterAsync(selectedBridge.IpAddress, "HomeBlaze", "Local", true, cancellationToken);
                var bridge = new HueBridge(ThingManager, EventManager, Logger)
                {
                    AppKey = result?.StreamingClientKey,
                    BridgeId = selectedBridge.BridgeId
                };

                return bridge;
            }
        }
        catch (Exception e)
        {
            await DialogService.ShowMessageBox("Failed to add Philips Hue Bridge", e.Message);
        }

        return null;
    }

    public override async Task<bool> UpdateEditedThingAsync(CancellationToken cancellationToken)
    {
        try
        {
            if (EditedThing != null &&
                _selectedBridge is LocatedBridge selectedBridge)
            {
                var result = await LocalHueApi.RegisterAsync(selectedBridge.IpAddress, "HomeBlaze", "Local", true, cancellationToken);
                EditedThing.AppKey = result?.StreamingClientKey;
                EditedThing.BridgeId = selectedBridge.BridgeId;
                return true;
            }
        }
        catch (Exception e)
        {
            await DialogService.ShowMessageBox("Failed to add Philips Hue Bridge", e.Message);
        }

        return false;
    }
}
