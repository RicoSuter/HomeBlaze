@using HomeBlaze.Components;
@using HomeBlaze.Tesla.Vehicle.Models;
@using Microsoft.Extensions.DependencyInjection;
@using MudBlazor
@using System.Threading
@using Microsoft.JSInterop
@using System.Net.Http;
@using System.Text.Json;
@using TeslaAuth;

@inject IDialogService DialogService
@inject IServiceProvider ServiceProvider
@inject IJSRuntime JsRuntime
@inject IHttpClientFactory HttpClientFactory

@inherits ThingSetupComponentBase<TeslaVehicle>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenLoginPage">Login with your Tesla account</MudButton>

<br />
<br />
<MudTextField @bind-Value="@_callbackUrl" Label="Paste redirect authenticate URL" Lines="5" />

<br />
<MudButton Variant="Variant.Filled" OnClick="@(_ => LoadVehiclesAsync(default))" 
    Color="Color.Primary">Load Vehicles</MudButton>

<br />
<br />
@if (_vehicles?.Response != null)
{
    <br />
    <MudItem>
        <MudList Clickable="true" @bind-SelectedValue="_selectedVehicle">
            <MudDivider />
            @foreach (var vehicle in _vehicles.Response)
            {
                <MudListItem Value="vehicle">
                    @vehicle.DisplayName (@vehicle.Vin)
                </MudListItem>

                <MudDivider />
            }
        </MudList>
    </MudItem>
}

@code {
    private TeslaAuthHelper _helper = new TeslaAuthHelper("HomeBlaze", TeslaAccountRegion.USA);

    private string? _callbackUrl;
    private Vehicles? _vehicles;
    private object? _selectedVehicle;
    private Tokens? _tokens;

    public override bool IsValid => !string.IsNullOrEmpty(_callbackUrl) && _selectedVehicle != null;

    [CascadingParameter]
    public MudDialogInstance? DialogInstance { get; set; }

    [Parameter]
    public TeslaVehicle? Thing { get; set; }

    public async void OpenLoginPage()
    {
        var requestUrl = _helper.GetLoginUrlForBrowser();
        await JsRuntime.InvokeVoidAsync("open", new[] { requestUrl });
    }

    public async Task LoadVehiclesAsync(CancellationToken cancellationToken)
    {
        try
        {
            _vehicles = null;

            var tokens = await GetAuthenticationTokensAsync();
            if (tokens != null)
            {
                using var httpClient = HttpClientFactory.CreateClient();
                await httpClient.AuthorizeAsync(
                    tokens.RefreshToken ?? throw new InvalidOperationException("RefreshToken is null."),
                    tokens.AccessToken ?? throw new InvalidOperationException("AccessToken is null"),
                    tokens.CreatedAt + tokens.ExpiresIn,
                    cancellationToken);

                var message = await httpClient.GetAsync("https://owner-api.teslamotors.com/api/1/vehicles", cancellationToken);
                var json = await message.Content.ReadAsStringAsync(cancellationToken);

                _vehicles = JsonSerializer.Deserialize<Vehicles>(json);
                _tokens = tokens;
            }
        }
        catch (Exception e)
        {
            await DialogService.ShowMessageBox("Failed to load vehicles.", e.ToString());
        }
    }

    public override Task<TeslaVehicle?> CreateThingAsync(CancellationToken cancellationToken)
    {
        if (_tokens != null && _selectedVehicle is TeslaVehicleItem selectedVehicle)
        {
            var vehicle = (TeslaVehicle)ActivatorUtilities.CreateInstance(ServiceProvider, typeof(TeslaVehicle));
            vehicle.VehicleId = selectedVehicle.IdString;
            vehicle.AccessToken = _tokens.AccessToken;
            vehicle.RefreshToken = _tokens.RefreshToken;
            vehicle.TokenExpirationDate = _tokens.CreatedAt + _tokens.ExpiresIn;
            return Task.FromResult<TeslaVehicle?>(vehicle);
        }

        return Task.FromResult<TeslaVehicle?>(null);
    }

    public override Task<bool> UpdateEditedThingAsync(CancellationToken cancellationToken)
    {
        if (_tokens != null && _selectedVehicle is TeslaVehicleItem selectedVehicle)
        {
            EditedThing!.VehicleId = selectedVehicle.IdString;
            EditedThing.AccessToken = _tokens.AccessToken;
            EditedThing.RefreshToken = _tokens.RefreshToken;
            EditedThing.TokenExpirationDate = _tokens.CreatedAt + _tokens.ExpiresIn;
            return Task.FromResult<bool>(true);
        }

        return Task.FromResult<bool>(false);
    }

    private async Task<Tokens?> GetAuthenticationTokensAsync()
    {
        try
        {
            return await _helper.GetTokenAfterLoginAsync(_callbackUrl);
        }
        catch (Exception e)
        {
            await DialogService.ShowMessageBox("Failed to authenticate.", e.ToString());
        }

        return null;
    }
}
