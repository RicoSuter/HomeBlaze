@page "/logs"

@using System.Threading;
@using Microsoft.Extensions.Logging;

@using HomeBlaze.Host.Logging;

@implements IDisposable

<PageTitle>Logs</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <br />
    <MudTable Items="@MemoryLogger.LogEntries" Hover="true" Dense="true" 
              Breakpoint="Breakpoint.Sm" Height="calc(100vh - 100px)">
        <HeaderContent>
            <MudTh Style="width: 100px">Time</MudTh>
            <MudTh Style="width: 100px">Level</MudTh>
            <MudTh>Message</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Time">@context.Time.ToString("HH:mm:ss.fff")</MudTd>
            <MudTd DataLabel="Level"><MudChip Color="@(GetLevelColor(context.Level))">@context.Level</MudChip></MudTd>
            <MudTd DataLabel="Message">
                @context.Message
                @if (context.Exception is not null)
                {
<pre>
@context.Exception
</pre>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private Timer? _timer = null;

    protected override void OnInitialized()
    {
        _timer = new Timer(OnTimer!, null, 5000, 5000);
    }

    private Color GetLevelColor(LogLevel level)
    {
        return
            level == LogLevel.Critical ? Color.Error :
            level == LogLevel.Error ? Color.Error :
            level == LogLevel.Warning ? Color.Warning :
            Color.Default;
    }

    private void OnTimer(object o)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
