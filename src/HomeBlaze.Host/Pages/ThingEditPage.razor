@using System.Reflection
@using System.ComponentModel
@using Microsoft.Extensions.DependencyInjection
@using HomeBlaze.Abstractions.Attributes
@using HomeBlaze.Abstractions.Presentation
@using HomeBlaze.Abstractions.Services
@using HomeBlaze.Abstractions
@using HomeBlaze.Components;
@using HomeBlaze.Components.Dialogs;
@using HomeBlaze.Host.Components
@using HomeBlaze.Things;
@using MudBlazor;
@using System.Threading;
@using Toolbelt.Blazor.HotKeys2;
@using Namotion.Reflection

@page "/things/{*thingId}"
@implements IThingEditPage
@implements IDisposable

@inject IThingManager ThingManager
@inject ITypeManager TypeManager
@inject IThingStorage ThingStorage
@inject IDialogService DialogService
@inject IThingSerializer ThingSerializer
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HotKeys HotKeys

<SectionContent Name="AppBar">
    Things / @(Thing?.Title ?? "Create")
    &nbsp;

    <MudButton OnClick="@(async () => await GoBackAsync(CancellationToken.None))"
               Color="Color.Warning" Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.ArrowBack" Class="ma-2">Discard</MudButton>
    <MudSpacer />

    @if (_json == null)
    {
        <MudButton OnClick="@(() => UpsertAsync(CancellationToken.None))"
                   Disabled="@(_processing || _component?.IsValid != true)"
                   Variant="Variant.Filled" Color="Color.Primary" Class="ma-2">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">@(Thing == null ? "Adding" : "Updating") Thing...</MudText>
            }
            else
            {
                <MudText>@(Thing == null ? "Add" : "Update") Thing</MudText>
            }
        </MudButton>
    }
</SectionContent>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (Thing != null)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="@(() => ToggleJson())" Class="ma-2" Style="float: right">
            @(_json == null ? "JSON" : "Thing")
        </MudButton>
    }

    <br />
    @if (Thing == null)
    {
        <MudGrid>
            <MudItem xs="12" md="4" lg="3" Class="d-flex">
                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                    <div style="height: calc(100vh - 110px); overflow-y: scroll">
                        <MudList Clickable="true"
                                 SelectedValue="_selectedThingType"
                                 SelectedValueChanged="type => OnThingTypeChanged((Type)type)">
                            @foreach (var thingType in _thingTypes)
                            {
                                <MudListItem Value="@thingType" Icon="@Icons.Material.Filled.Inbox">
                                    @(thingType.GetCustomAttribute<DisplayNameAttribute>(true)?.DisplayName ?? thingType.Name)
                                </MudListItem>
                            }
                        </MudList>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <MudSelect T="object" Label="Thing Type" Value="_selectedThingType" ValueChanged="type => OnThingTypeChanged((Type)type)">
                        @foreach (var thingType in _thingTypes)
                        {
                            <MudSelectItem Value="@thingType" T="object">
                                @(thingType.GetCustomAttribute<DisplayNameAttribute>(true)?.DisplayName ?? thingType.Name)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudHidden>
            </MudItem>
            <MudItem xs="12" md="8" lg="9" Class="d-flex">
                @if (_selectedThingType != null)
                {
                    var descriptionAttribute = ((Type)_selectedThingType).GetCustomAttribute<DescriptionAttribute>(true) as DescriptionAttribute;
                    var displayNameAttribute = ((Type)_selectedThingType).GetCustomAttribute<DisplayNameAttribute>(true) as DisplayNameAttribute;

                    <div style="width: 100%">
                        <h2>Create @(displayNameAttribute?.DisplayName ?? ((Type)_selectedThingType).Name)</h2>

                        @if (descriptionAttribute != null)
                        {
                            <p>
                                <strong>@(descriptionAttribute.Description)</strong>
                            </p>
                        }

                        <br />

                        @if (_json == null)
                        {
                            <div>
                                @SetupFragment
                            </div>
                        }
                        else
                        {
                            <MudTextField T="string" Variant="Variant.Text" @bind-Text="_json" Lines="20" />
                        }
                    </div>
                }
            </MudItem>
        </MudGrid>
    }
    else
    {
        <h1>@Thing.Title</h1>
        @if (Thing.GetType().GetCustomAttribute<DisplayNameAttribute>(true) is DisplayNameAttribute nameAttribute)
        {
            <h2>@(nameAttribute.DisplayName)</h2>
        }
        @if (Thing.GetType().GetCustomAttribute<DescriptionAttribute>(true) is DescriptionAttribute descriptionAttribute)
        {
            <p>
                <strong>@(descriptionAttribute.Description)</strong>
            </p>
        }

        <br />

        @if (_json == null)
        {
            <div>
                @SetupFragment
            </div>
        }
        else
        {
            <MudTextField T="string" Variant="Variant.Text" @bind-Text="_json" Lines="20" />
        }
    }
    <br />

</MudContainer>

@code {
    private string? _json = null;
    private string? _originalThingJson = null;
    private HotKeysContext? _hotKeysContext = null;

    private bool _processing = false;
    private IThingSetupComponent? _component;

    private Type[] _thingTypes = new Type[0];
    private RenderFragment? _thingSetupFragment;
    private object? _selectedThingType;

    private RenderFragment? SetupFragment
    {
        get
        {
            if (Thing == null)
            {
                if (_thingSetupFragment != null && _selectedThingType != null)
                {
                    return _thingSetupFragment;
                }
            }
            else
            {
                @if (_thingSetupFragment != null)
                {
                    return _thingSetupFragment;
                }
            }

            return null;
        }
    }

    [Parameter]
    public string? ThingId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "parentThingId")]
    public string? ParentThingId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "extendedThingId")]
    public string? ExtendedThingId { get; set; }

    public IThing? Thing { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Update();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _hotKeysContext = HotKeys
            .CreateContext()
            .Add(ModCode.None, Code.Escape, async () => await GoBackAsync(CancellationToken.None))
            .Add(ModCode.Ctrl, Code.S, async () => await UpsertAsync(CancellationToken.None));

        Thing = ThingManager.TryGetById(ThingId);
        Update();
    }

    private void Update()
    {
        _thingTypes = TypeManager
            .ThingTypes
            .Where(t => t.GetCustomAttribute<ThingSetupAttribute>() != null)
            .Where(t => t.GetCustomAttribute<ThingWidgetAttribute>() == null)
            .Where(t => string.IsNullOrEmpty(ExtendedThingId) || (
                t.IsAssignableTo(typeof(IExtensionThing)) &&
                t.GetMethod("CanExtend")?.Invoke(null, new[] { ThingManager.TryGetById(ExtendedThingId) }) as bool? != false))
            .ToArray();

        if (Thing != null)
        {
            _originalThingJson = ThingSerializer.SerializeThing(Thing);

            var thingType = _thingTypes.SingleOrDefault(f => f.FullName == Thing.GetType().FullName);
            var attribute = thingType?.GetCustomAttribute<ThingSetupAttribute>();
            if (attribute != null && attribute.ComponentType?
                .GetProperty(nameof(ThingSetupComponentBase<IThing>.EditedThing)) != null)
            {
                _thingSetupFragment = builder =>
                {
                    builder.OpenComponent(0, attribute.ComponentType);
                    builder.AddAttribute(1, nameof(ThingSetupComponentBase<IThing>.EditedThing), Thing);
                    builder.AddAttribute(2, nameof(IThingSetupComponent.Page), this);
                    builder.CloseComponent();
                };
            }
            else
            {
                _thingSetupFragment = null;
            }
        }
        else if (_thingTypes.Length == 1)
        {
            OnThingTypeChanged(_thingTypes.First());
        }
    }

    public void ToggleJson()
    {
        if (Thing != null)
        {
            try
            {
                if (_json != null)
                {
                    ThingSerializer.PopulateThing(Thing, _json);
                    _json = null;
                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    _json = ThingSerializer.SerializeThing(Thing);
                    InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception e)
            {
                DialogService.ShowMessageBox("Failed", e.ToString());
            }
        }
    }

    [Inject]
    public IServiceProvider? ServiceProvider { get; set; }

    private void OnThingTypeChanged(Type thingType)
    {
        _component = null;

        _selectedThingType = thingType;
        if (_selectedThingType != null && ServiceProvider is not null)
        {
            var attribute = ((Type)_selectedThingType).GetCustomAttribute<ThingSetupAttribute>();
            if (attribute != null && attribute.ComponentType != null)
            {
                _thingSetupFragment = builder =>
                {
                    builder.OpenComponent(0, attribute.ComponentType);
                    builder.AddAttribute(1, nameof(IThingSetupComponent.Page), this);
                    builder.AddAttribute(2, nameof(ThingSetupComponentBase<IThing>.ExtendedThing), ThingManager.TryGetById(ExtendedThingId));
                    builder.CloseComponent();
                };
            }
            else
            {
                _component = new CreateTypeSetupComponent((Type)_selectedThingType, ExtendedThingId, ServiceProvider);
                _thingSetupFragment = null;
            }
        }
        else
        {
            _thingSetupFragment = null;
        }
    }

    public class CreateTypeSetupComponent : ThingSetupComponent<IThing>
    {
        private readonly Type _thingType;
        private readonly string? _extendedThingId;

        public CreateTypeSetupComponent(Type thingType, string? extendedThingId, IServiceProvider serviceProvider)
        {
            _thingType = thingType;
            _extendedThingId = extendedThingId;
            ServiceProvider = serviceProvider;
        }

        public override Task<IThing?> CreateThingAsync(CancellationToken cancellationToken)
        {
            var thing = (IThing?)ActivatorUtilities.CreateInstance(ServiceProvider!, _thingType);

            if (!string.IsNullOrEmpty(_extendedThingId) &&
                thing is IExtensionThing extensionThing &&
                extensionThing.HasProperty("ExtendedThingId"))
            {
                // TODO: Add an interface for that
                ((dynamic)extensionThing).ExtendedThingId = _extendedThingId;
            }

            return Task.FromResult(thing);
        }
    }

    public void RegisterComponent(IThingSetupComponent component)
    {
        _component = component;
    }

    public async Task RefreshAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpsertAsync(CancellationToken cancellationToken)
    {
        if (_component != null)
        {
            try
            {
                _processing = true;
                await InvokeAsync(StateHasChanged);

                if (Thing == null)
                {
                    var thing = await _component.CreateThingAsync(cancellationToken);
                    if (thing != null)
                    {
                        var parentThing = ThingManager.TryGetById(ParentThingId) as IGroupThing;
                        if (parentThing != null)
                        {
                            parentThing.AddThing(thing);

                            if (!string.IsNullOrEmpty(ExtendedThingId) &&
                                Thing is IExtensionThing extensionThing &&
                                extensionThing.HasProperty("ExtendedThingId"))
                            {
                                // TODO: Add an interface for that
                                ((dynamic)extensionThing).ExtendedThingId = ExtendedThingId;
                            }

                            await ThingManager.WriteConfigurationAsync(cancellationToken);
                            ThingManager.DetectChanges((IThing)parentThing);

                            await GoBackAsync(cancellationToken);
                        }
                    }
                }
                else
                {
                    var isSuccessful = await _component.UpdateEditedThingAsync(cancellationToken);
                    if (isSuccessful)
                    {
                        await ThingManager.WriteConfigurationAsync(cancellationToken);
                        ThingManager.DetectChanges((IThing)Thing);

                        await GoBackAsync(cancellationToken);
                    }
                }
            }
            catch (Exception e) when (e is not TaskCanceledException)
            {
                await DialogService.ShowMessageBox("Error", e.ToString());
            }
            finally
            {
                _processing = false;
            }
        }
    }

    private async Task GoBackAsync(CancellationToken cancellationToken)
    {
        if (Thing == null || _component?.IsDirty == false)
        {
            await JSRuntime.InvokeVoidAsync("history.back");
        }
        else
        {
            var delete = await DialogService.ShowMessageBox("Discard Changes", "Do you really want to discard all changes?", "Discard", "No");
            if (delete == true)
            {
                await JSRuntime.InvokeVoidAsync("history.back");
            }
        }
    }

    public void Dispose()
    {
        _hotKeysContext?.Dispose();
    }
}