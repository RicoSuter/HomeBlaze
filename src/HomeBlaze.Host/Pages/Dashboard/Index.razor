@page "/"

@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Components
@using HomeBlaze.Abstractions.Attributes;
@using HomeBlaze.Abstractions.Messages;
@using HomeBlaze.Abstractions.Services;
@using HomeBlaze.Abstractions;
@using HomeBlaze.Components.Dialogs;
@using HomeBlaze.Host.Shared;
@using HomeBlaze.Infrastructure
@using HomeBlaze.Pages.Dashboard;
@using HomeBlaze.Things;
@using System.Reflection;

@inject IThingManager ThingManager
@inject IThingStorage ThingStorage
@inject IDialogService DialogService
@inject IEventManager EventManager
@inject NavigationManager Navigation

<SectionContent Name="AppBar">
    @foreach (var dashboard in _dashboards)
    {
        <MudToggleIconButton Icon="@("fas fa-" + dashboard.Icon)"
                         ToggledIcon="@("fas fa-" + dashboard.Icon)"
                         Style="@("color: white; opacity: " + (dashboard == _selectedDashboard ? "1.0" : "0.5"))"
                         Toggled="dashboard == _selectedDashboard"
                         ToggledChanged="@(value => { if (value) { Navigation.NavigateTo("?name=" + dashboard.Name); } })"
                         Class="mr-2" />
    }

    @if (_selectedDashboard != null && _diagram != null)
    {
        @if (_isEditMode)
        {
            <MudButton StartIcon="@Icons.Filled.Add" OnClick="AddDashboard" Color="Color.Primary">Add Dashboard</MudButton>
            <MudButton StartIcon="@Icons.Filled.Edit" OnClick="EditDashboard">Edit</MudButton>
            @if (_dashboards.Length > 1)
            {
                <MudButton StartIcon="@Icons.Filled.Delete" Color="Color.Error" OnClick="DeleteDashboard">Delete</MudButton>
            }
        }

        <MudSpacer />

        @if (_isEditMode)
        {
            <MudButton StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="AddWidget">Add Widget</MudButton>

            @if (_diagram.GetSelectedModels().Any())
            {
                <MudButton StartIcon="@Icons.Filled.MoveUp" OnClick="MoveSelectedWidgetToTop">Move to Top</MudButton>
                <MudButton StartIcon="@Icons.Filled.ContentCopy" OnClick="CloneSelectedWidget">Clone</MudButton>
                <MudButton StartIcon="@Icons.Filled.Delete" OnClick="DeleteSelectedWidget" Color="Color.Error">Delete</MudButton>
            }
        }

        <MudIconButton OnClick="ToggleEditMode" Icon="@(_isEditMode ? Icons.Filled.Close : Icons.Filled.Edit)" />
    }
</SectionContent>

<style>
    .dashboard {
        color: @(MainLayout.UseDarkTheme ? "#ffffff" : "#000000");
    }

    .locked {
        pointer-events: none !important;
    }
</style>

<CascadingValue Value="_diagram">
    <DiagramCanvas Class="dashboard"></DiagramCanvas>
</CascadingValue>

@code {
    private IDisposable? _eventSubscription;

    private Diagram _diagram;

    public bool _isEditMode;

    private HomeBlaze.Things.Dashboard? _selectedDashboard;
    private HomeBlaze.Things.Dashboard[] _dashboards = Array.Empty<HomeBlaze.Things.Dashboard>();

    [Parameter]
    [SupplyParameterFromQuery(Name = "name")]
    public string? Name { get; set; }

    protected override void OnInitialized()
    {
        var options = new DiagramOptions
            {
                DeleteKey = "Delete",

                AllowPanning = false,
                AllowMultiSelection = false,

                GridSize = 25,
                Zoom = new DiagramZoomOptions
                {
                    Enabled = false
                }
            };

        _diagram = new Diagram(options);
        _diagram.RegisterModelComponent<WidgetNodeModel, WidgetNode>();
        _diagram.SelectionChanged += node =>
        {
            InvokeAsync(StateHasChanged);
        };

        _diagram.Nodes.Removed += node =>
        {
            if (node is WidgetNodeModel widgetNodeModel && _selectedDashboard != null)
            {
                _selectedDashboard.Widgets.Remove(widgetNodeModel.Widget);
                ThingManager.DetectChanges(_selectedDashboard);
            }
        };

        _diagram.KeyDown += OnKeyDown;

        _eventSubscription = EventManager
            .Subscribe(message =>
            {
                if (_selectedDashboard == null &&
                    message is RootThingLoadedEvent)
                {
                    InvokeAsync(() => TryLoadDashboard());
                }
                else if (message is ThingStateChangedEvent)
                {
                    InvokeAsync(() =>
                    {
                        // TODO: Can we optimize this and only refresh the involved nodes?
                        // Remove this and the widgets should listen for messages they need and rerender internally!
                        StateHasChanged();
                        _diagram.Refresh();
                        foreach (var node in _diagram.Nodes)
                        {
                            node.Refresh();
                        }
                    });
                }
            });

        Navigation.LocationChanged += TryLoadDashboard;
        TryLoadDashboard();
    }

    private void TryLoadDashboard(object? sender, LocationChangedEventArgs e)
    {
        TryLoadDashboard();
    }

    private void TryLoadDashboard()
    {
        var systemThing = ThingManager?.RootThing as SystemThing;
        if (systemThing != null)
        {
            _dashboards = systemThing.Dashboards.ToArray();
            _selectedDashboard = null;

            var selectedDashboard = _dashboards
                .FirstOrDefault(d => d.Name == Name) ?? _dashboards.First();

            _diagram?.Batch(() =>
            {
                _diagram?.Nodes.Clear();

                foreach (var widget in selectedDashboard.Widgets)
                {
                    var node = new WidgetNodeModel(widget)
                        {
                            Locked = !_isEditMode
                        };

                    _diagram?.Nodes.Add(node);
                    node.Refresh();
                }
            });

            _selectedDashboard = selectedDashboard;
            _diagram?.Refresh();
        }

        StateHasChanged();
    }

    public async void ToggleEditMode(MouseEventArgs args)
    {
        _isEditMode = !_isEditMode;

        _diagram?.Batch(() =>
        {
            foreach (var node in _diagram.Nodes)
            {
                node.Locked = !_isEditMode;
                node.Refresh();
            }
        });

        if (!_isEditMode)
        {
            await ThingManager.WriteConfigurationAsync(CancellationToken.None);
        }
    }

    public async void AddDashboard(MouseEventArgs args)
    {
        var dashboard = await DashboardDialog.CreateAsync(DialogService);
        if (dashboard != null)
        {
            var systemThing = ThingManager?.RootThing as SystemThing;
            if (systemThing != null)
            {
                systemThing.Dashboards.Add(dashboard);
                TryLoadDashboard();
            }
        }
    }

    public async void EditDashboard(MouseEventArgs args)
    {
        if (_selectedDashboard != null)
        {
            await DashboardDialog.EditAsync(DialogService, _selectedDashboard);
            StateHasChanged();
        }
    }

    public void DeleteDashboard(MouseEventArgs args)
    {
        var systemThing = ThingManager?.RootThing as SystemThing;
        if (systemThing != null && _selectedDashboard != null)
        {
            systemThing.Dashboards.Remove(_selectedDashboard);
            TryLoadDashboard();
        }
    }

    public async void AddWidget(MouseEventArgs args)
    {
        var thing = await ThingSetupDialog.AddThingAsync(DialogService, t => t.GetCustomAttribute<ThingWidgetAttribute>() != null);
        if (thing != null)
        {
            AddThingWidgetToDashboard(thing);
        }
    }

    public void CloneSelectedWidget(MouseEventArgs args)
    {
        if (ThingStorage != null)
        {
            foreach (var model in _diagram
                .GetSelectedModels()
                .OfType<WidgetNodeModel>()
                .ToArray())
            {
                if (model.Widget.Thing != null)
                {
                    var clonedThing = ThingStorage.CloneThing(model.Widget.Thing);
                    AddThingWidgetToDashboard(clonedThing);
                }
            }

            _diagram.Refresh();
        }
    }

    private void AddThingWidgetToDashboard(IThing? thing)
    {
        if (_diagram != null && _selectedDashboard != null)
        {
            var widget = new Widget { Thing = thing };

            _diagram.Nodes.Add(new WidgetNodeModel(widget));
            _selectedDashboard.Widgets.Add(widget);

            ThingManager.DetectChanges(_selectedDashboard);
        }
    }

    public void MoveSelectedWidgetToTop(MouseEventArgs args)
    {
        if (_diagram != null && _selectedDashboard != null)
        {
            foreach (var model in _diagram
                .GetSelectedModels()
                .OfType<WidgetNodeModel>()
                .ToArray())
            {
                _selectedDashboard.Widgets.Remove(model.Widget);
                _selectedDashboard.Widgets.Add(model.Widget);

                _diagram.Nodes.Remove(model);
                _diagram.Nodes.Add(model);

                model.Refresh();
            }

            _diagram.Refresh();
        }
    }

    public void DeleteSelectedWidget(MouseEventArgs args)
    {
        if (_diagram != null && _selectedDashboard != null)
        {
            foreach (var model in _diagram
                .GetSelectedModels()
                .OfType<WidgetNodeModel>()
                .ToArray())
            {
                _selectedDashboard.Widgets.Remove(model.Widget);
                _diagram.Nodes.Remove(model);

                model.Refresh();
            }

            _diagram.Refresh();
            ThingManager.DetectChanges(_selectedDashboard);
        }
    }

    public void OnKeyDown(KeyboardEventArgs args)
    {
        if ((args.AltKey || args.CtrlKey || args.ShiftKey) &&
            args.Code != "ArrowLeft" && args.Code != "ArrowRight" &&
            args.Code != "ArrowUp" && args.Code != "ArrowDown")
        {
            return;
        }

        if (_diagram != null && _selectedDashboard != null)
        {
            foreach (var model in _diagram
                .GetSelectedModels()
                .OfType<WidgetNodeModel>()
                .ToArray())
            {
                if (args.Code == "ArrowLeft")
                {
                    model.Position = new Point(model.Position.X - 5, model.Position.Y);
                }
                else if (args.Code == "ArrowRight")
                {
                    model.Position = new Point(model.Position.X + 5, model.Position.Y);
                }
                else if (args.Code == "ArrowUp")
                {
                    model.Position = new Point(model.Position.X, model.Position.Y - 5);
                }
                else if (args.Code == "ArrowDown")
                {
                    model.Position = new Point(model.Position.X, model.Position.Y + 5);
                }

                model.UpdatePosition();
                model.Refresh();
            }

            _diagram.Refresh();
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= TryLoadDashboard;
        _eventSubscription?.Dispose();
    }
}