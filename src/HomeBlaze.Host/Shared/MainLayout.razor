@using HomeBlaze.Components.Abstractions
@using HomeBlaze.Host.Components
@using HomeBlaze.Abstractions.Services
@using HomeBlaze.Abstractions.Presentation

@inject IThingManager ThingManager

@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="UseDarkTheme" />
<MudDialogProvider Position="DialogPosition.Center" />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <SectionOutlet Name="AppBar" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="25" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">HomeBlaze</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Dashboard</MudNavLink>

            @foreach (var pageThing in ThingManager.AllThings.OfType<IPageProvider>())
            {
                <MudNavLink Href="@("/page?p=" + Uri.EscapeDataString(pageThing.Id))" Match="NavLinkMatch.All"
                            Icon="@Icons.Material.Filled.Home">@pageThing.PageTitle</MudNavLink>
            }

            <MudNavLink Href="/things" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Things</MudNavLink>
            <MudNavLink Href="/network" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Network</MudNavLink>
            <MudNavLink Href="/list" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Debug</MudNavLink>
            <MudNavLink Href="/logs" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Logs</MudNavLink>
            <MudSpacer />
            <MudNavLink Icon="@Icons.Material.Filled.FormatPaint" OnClick="@((e) => ToggleTheme())">Use @(UseDarkTheme ? "Light" : "Dark") Mode</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = false;

    public static MainLayout? Instance { get; private set; }

    protected override void OnInitialized()
    {
        Instance = this;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ToggleTheme()
    {
        UseDarkTheme = !UseDarkTheme;
    }

    public static bool UseDarkTheme { get; private set; } = true;
}