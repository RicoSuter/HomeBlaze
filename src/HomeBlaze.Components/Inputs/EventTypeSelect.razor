@using HomeBlaze.Abstractions;
@using HomeBlaze.Abstractions.Services;
@using HomeBlaze.Messages;
@using MudBlazor

@inject IThingManager ThingManager
@inject ITypeManager TypeManager

<MudSelect T="Type" Label="@Label" Required="Required" Disabled="Disabled"
           Value="@(TypeManager.EventTypes.FirstOrDefault(e => e.FullName == EventTypeName))" 
           ValueChanged="@(e => EventTypeNameChanged.InvokeAsync(e?.FullName))">
    
    @if (!Required)
    {
        <MudSelectItem Value="@(null)" T="Type">&lt;None&gt;</MudSelectItem>
    }

    @foreach (var eventType in TypeManager.EventTypes.Where(e => e != typeof(ThingStateChangedEvent)))
    {
        <MudSelectItem Value="@eventType">@eventType.FullName</MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public string? EventTypeName { get; set; }

    [Parameter]
    public EventCallback<string?> EventTypeNameChanged { get; set; }
}
