@using HomeBlaze.Abstractions;
@using HomeBlaze.Abstractions.Services;
@using MudBlazor

@inject IThingManager ThingManager

<MudSelect T="string" Label="@Label" Required="Required" Disabled="Disabled"
           Value="PropertyName" ValueChanged="@(value => PropertyNameChanged.InvokeAsync(value))">
    @if (ThingId != null)
    {
        var thing = ThingManager.TryGetById(ThingId);
        if (thing != null)
        {
            if (!Required)
            {
                <MudSelectItem Value="@(null)" T="string">&lt;None&gt;</MudSelectItem>
            }

            @foreach (var pair in ThingManager.GetState(thing, true).Where(p => !p.Value.HasThingChildren))
            {
                <MudSelectItem Value="@pair.Key" />
            }
        }
    }
</MudSelect>

@code {
    [Parameter]
    public string? ThingId { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public string? PropertyName { get; set; }

    [Parameter]
    public EventCallback<string?> PropertyNameChanged { get; set; }
}
