@using HomeBlaze.Abstractions;
@using HomeBlaze.Abstractions.Services;
@using MudBlazor

@inject IThingManager ThingManager

<MudSelect T="string" Label="@Label" Required="Required" Disabled="Disabled" Style="@Style"
           Value="PropertyName" ValueChanged="@(value => PropertyNameChanged.InvokeAsync(value))">
    @if (ThingId != null)
    {
        if (!Required)
        {
            <MudSelectItem Value="@(null)" T="string">&lt;None&gt;</MudSelectItem>
        }

        @foreach (var pair in ThingManager.GetState(ThingId, true).Where(p => !p.Value.HasThingChildren))
        {
            <MudSelectItem Value="@pair.Key" />
        }
    }
</MudSelect>

@code {
    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public string? ThingId { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public string? PropertyName { get; set; }

    [Parameter]
    public EventCallback<string?> PropertyNameChanged { get; set; }
}
