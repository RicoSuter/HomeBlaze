@using HomeBlaze.Abstractions;
@using HomeBlaze.Abstractions.Attributes;
@using HomeBlaze.Abstractions.Services;
@using MudBlazor
@using System.Reflection;

@inject ITypeManager TypeManager

<MudSelect T="string" Label="@Label" Required="Required" Disabled="Disabled"
           Value="PropertyName" ValueChanged="@(value => PropertyNameChanged.InvokeAsync(value))">
    @if (InterfaceName != null)
    {
        var interfaceType = TypeManager.ThingInterfaces.FirstOrDefault(i => i.FullName == InterfaceName);
        if (interfaceType != null)
        {
            if (!Required)
            {
                <MudSelectItem Value="@(null)" T="string">&lt;None&gt;</MudSelectItem>
            }

            @foreach (var propertyName in interfaceType
                .GetProperties()
                .Select(property => property.GetCustomAttribute<StateAttribute>(true) is StateAttribute attribute ? 
                    (attribute.Name ?? property.Name) : null)
                .Where(n => n != null))
            {
                <MudSelectItem Value="@propertyName" />
            }
        }
    }
</MudSelect>

@code {
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public string? InterfaceName { get; set; }

    [Parameter]
    public string? PropertyName { get; set; }

    [Parameter]
    public EventCallback<string?> PropertyNameChanged { get; set; }
}
